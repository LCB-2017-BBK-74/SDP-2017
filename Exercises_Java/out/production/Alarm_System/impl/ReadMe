# Week 2: SOLID principles using the Alarm System example
# Notes responding to questions in the worksheet

/**
 * Interesting and useful notes on SOLID here:
 * https://dzone.com/articles/the-solid-principles-in-real-life
 */


/** Q3. ControlUnit.pollSensors() method. Its current responsibilities are to add sensors to an ArrayList,
 * instantiating a new object each time new FireSensor(location) or new SmokeSensor(location) is called
 * If the sensor is triggered, get the sensor type and sensor location and print them;
 *  Finally to print a message stating that theu have been polled successfully
 *  Sensors will be polled each time the pollSensors() method is called but not always triggered
 *
 *  The current design - creating the list of sensors within the pollSensors() method in the ControlUnit class -
 *  violates the Single Responsibility Principle (the S of SOLID).
 *  Instead, we want to create the list outside the pollSensors() method, but still within the ControlUnit class.
 *  Alternatively we could create a new class just for creating the sensor list, but this feels over-complex.
 */

/**
 * Q4. Now I've created a constructor which initialises an empty arrayList, sensors, and configures the sensors
 * The configureSensors() method adds the sensors to a list
 * Now the pollSensors() method simply checks each sensor and prints out whether it has been triggered or polled
 */

/**
 * Q6. A new use case! The alarm system now consists of hazard sensors (fire and smoke) and security sensors (motion and heat)
 * Therefore we need a way to distinguish between the SecuritySensor sensor and the HazardSensor.
 * SecuritySensor inherits from the Sensor interface.
 * SecuritySensor types of sensor don't run on battery so now the getBatteryPercentage method is redundant for a whole set
 * of sensors, the SecuritySensors. Also, the isTriggered() method now needs to be changed too because this will break for
 * sensors without batteries (could be overridden).
 * This violates the O of SOLID (Open-Closed Principle), which states that code entities should be open for extension,
 * but closed for modification. In other words, we should write a class that does what it needs to do flawlessly
 * without assuming that people can come in and change it later. It should be closed for modification but can be
 * extended, by for example, inheriting from it or overriding methods and extending certain behaviours.
 *
 * Q6 and Q8. Therefore we need a new interface: SecuritySensor and HazardSensor, which extend the Sensor interface
 * (remember Meeting, PastMeeting and FutureMeeting from ContactManager)
 * Take the getBatteryPercentage() method out of Sensor
 * then interface SecuritySensor extends Sensor but is purely for naming purposes; and classes MotionSensor and HeatSensor implement SecuritySensor
 * and interface HazardSensor extends Sensor, with an extra method getBatteryPercentage();
 * and classes FireSensor and SmokeSensor implement HazardSensor.
 * I've used the Interface segregation principle of SOLID here: better to create more, smaller client-specific interfaces
 * than one monolithic one.
 */

 /**
 * Q9. Security sensors should only be polled at night between 22:00 and 06:00. This is the same for all security sensors
 * but assume not for Hazard sensors. Therefore we want to create a SecurityControlUnit which enhances ControlUnit.
 * We can do this by creating a new class, SecurityControlUnit, which is a subclass of ControlUnit, passing in the security
 * sensors through the parent constructor and implementing a method that checks the current time and polls the sensors
 * if between 22:00 and 06:00 using super.pollSensors() which does all the heavy lifting.
 */

 /**
  * Q10. We are maintaing the Liskov substitution principle by maintaining this - i.e. ensuring that a subclass inherits
  * all the behaviour of a super class without breaking, i.e. any child type should inherit the behaviour of a parent type
  * without things blowing up. Child class methods can override parent methods but should not contradict them.
  * Quote from DZone articles on SOLID principles: "In other words, if you have a class, Animal, with a MakeNoise() method,
  * then any subclass of Animal should reasonably implement MakeNoise(). Cats should meow, dogs should bark, etc.
  * What you wouldn't do is define a MuteMouse class that throws IDontActuallyMakeNoiseException.
  * This violates the LSP, and the argument would be that this class has no business inheriting from Animal."
  *

