Q9. Describe briefly how you would refactor a given class into a Singleton:

Turn into a case class with a companion object. The case class has a built in 'apply' method, which allows a new
instance of the class to be created without using the keyword New.

From Wikipedia:
In software engineering, the singleton pattern is a software design pattern that restricts the instantiation of a class
 to one object. This is useful when exactly one object is needed to coordinate actions across the system.
 The concept is sometimes generalized to systems that operate more efficiently when only one object exists,
 or that restrict the instantiation to a certain number of objects.

There are some who are critical of the singleton pattern and consider it to be an anti-pattern in that it is frequently
used in scenarios where it is not beneficial, introduces unnecessary restrictions in situations where a sole instance
of a class is not actually required, and introduces global state into an application.

Alvin Alexander:
Create Singleton objects in Scala with the object keyword.
For instance, you might create a Singleton object to represent something like a keyboard, mouse,
or perhaps a cash register in a pizza restaurant:

object CashRegister {
    def open { println("opened") }
    def close { println("closed") }
}

With CashRegister defined as an object, there can be only one instance of it,
and its methods are called just like static methods on a Java class:

object Main extends App {
    CashRegister.open
    CashRegister.close
}
This pattern is also common when creating utility methods, such as this DateUtils object:

import java.util.Calendar
import java.text.SimpleDateFormat
object DateUtils {

    // as "Thursday, November 29"
    def getCurrentDate: String = getCurrentDateTime("EEEE, MMMM d")

    // as "6:20 p.m."
    def getCurrentTime: String = getCurrentDateTime("K:m aa")

    // a common function used by other date/time functions
    private def getCurrentDateTime(dateTimeFormat: String): String = {
        val dateFormat = new SimpleDateFormat(dateTimeFormat)
        val cal = Calendar.getInstance()
        dateFormat.format(cal.getTime())
    }

}
Because these methods are defined in an object instead of a class, they can be called in the same way as a static method in Java:

scala> DateUtils.getCurrentTime
res0: String = 10:13 AM

scala> DateUtils.getCurrentDate
res1: String = Friday, July 6
Singleton objects also make great reusable messages when using actors.
If you have a number of actors that can all receive start and stop messages, you can create Singletons like this:

case object StartMessage
case object StopMessage
You can then use those objects as messages that can be sent to actors:

inputValve ! StopMessage
outputValve ! StopMessage

In fact, a case class with no type parameters (e.g. case class Something instead of Something[A])
will by default create a singleton object of the same name, with a Function* trait implemented.

Case classes are useful in pattern matching:
http://docs.scala-lang.org/tutorials/tour/pattern-matching.html

You get the equals, hashcode, toString, etc.

For example,

scala> object X
defined object X

scala> println(X)
$line7.$read$$iw$$iw$X$@a565cbd

scala> case object Y
defined object Y

scala> println(Y)
Y